---
title: "Getting Demographic Data"
author: "Martin Summer"
format: html
editor: source
---

## Reading the IDB data

We would like to get a global demographic dataset using the data from the idbr 
database in the US. We try to work with the idbr package provided by walker, which
reads the IDB census data, a data collection from the US census bureau: https://github.com/walkerke/idbr
The API key is 8b046bdcea1cc2ba58889846bf066ffc73c70ebe

This package does not seem to work or the communication with the API is difficult.
So we will not execute the following code.

```{r}
# library(devtools)
# install_github('walkerke/idbr')
# 
# library(idbr)
# idb_api_key('8b046bdcea1cc2ba58889846bf066ffc73c70ebe')
```

We could instead of using the API download the dataset and read it with readr

```{r}
library(readr)
```

This reads the 5 years datafile from the IDB

```{r}
dat <- read_delim("~/R/Statistics_JWL/data/people_count/idb5yr.txt", delim = "|", show_col_types = F)
```

```{r}
# It looks like the last two characters in GEO_ID are country codes. Let's try this and see where we
# get

# write function to extract the last two characters from a string

substrRight <- function(x, n){
  substr(x, nchar(x)-n+1, nchar(x))
}

# extract the last two characters from GEO_ID

dat$GEO_ID <- substrRight(dat$GEO_ID,2)
```


```{r}
# read ISO codes

iso <- read_csv("~/R/Statistics_JWL/data/people_count/ISO-alpha2.csv", show_col_types = F)
names(iso) <- c("GEO_ID", "Name")
```

```{r}
# read variable labels

my_labels <- read_csv("~/R/Statistics_JWL/data/people_count/labels.csv", show_col_types = FALSE)

```

```{r}
# See what is in dat$GEO_ID

iso_dat <- as.data.frame(unique(dat$GEO_ID))
names(iso_dat) <- c("GEO_ID")
```

Compare the codes and countries:

```{r}
test <- merge(iso_dat, iso, by = "GEO_ID", all = TRUE)
missing <- test[is.na(test$Name), ]
```

```{r}
test[160, 2] <- "Namibia"
test[245, 2] <- "Gazastrip"
test[246, 2] <- "Kosovo"
test[247, 2] <- "Westbank"
```

```{r}
all_countries <- test[1:(nrow(test)-1), ]
```

```{r}
# match iso and countries and then bring name column to the front as the first
# column

data <- merge(dat, all_countries, by = "GEO_ID", all.x = T)
data_final <- data[,c(ncol(data),1:(ncol(data)-1))]
```


```{r}
names(data_final) <- c("Country", "ISO2", "Year", "Area_km2", names(data_final)[5:length(data_final)])
```

```{r}
col_order <- names(data_final)[order(nchar(names(data_final)), names(data_final))]
col_order_comp <- col_order[! col_order %in% c("Country", "ISO2", "Year", "Area_km2")]
```

```{r}
col_order <- c("Country", "ISO2", "Year", "Area_km2", col_order_comp)
```

```{r}
data_ordered <- data_final[,col_order]
```

```{r}
library(tidyverse)
```

```{r}
data_dem <- as_tibble(data_ordered)
names(data_dem)
```

```{r}
names(data_dem) <-c("Country","ISO2","Year","Area_km2","E0","GR","CBR",       
                    "CDR", "GRR", "IMR", "NIM", "NMR", "POP", "RNI",        
                    "SRB", "TFR", "F-E0", "M-E0", "F-POP", "M-POP", "DEPND",      
                    "F-IMR", "M-IMR", "MR_0-4", "MR_1-4", "BIRTHS", "DEATHS", "F-MR_0-4",      
                    "F-MR_1-4", "MEDAGE", "M-MR_0-4", "M-MR_1-4", "POP_0-4", "POP_5-9", "F-POP_0-4",    
                    "F-POP_5-9", "M-POP_0-4", "M-POP_5-9", "NATINCR", "POP_100-105", 
                    "DEPND_65-105", "F-POP_100-105",    
                    "F-MEDAGE", "M-MEDAGE", "M-POP_100-105", "POP_DENS", "POP_10-14", 
                    "POP_15-19", "POP_20-24",   
                    "POP_25-29", "POP_30-34", "POP_35-39", "POP_40-44", "POP_45-49", "POP_50-54", "POP_55-59",   
                    "POP_60-64", "POP_65-69", "POP_70-74", "POP_75-79", "POP_80-84", "POP_85-89", "POP_90-94",   
                    "POP_95-99", "SEXRATIO", "F-ASFR_15-19", "F-ASFR_20-24", 
                    "F-ASFR_25-29", "F-ASFR_30-34", "F-ASFR_35-39",  
                    "F-ASFR_40-44", "F-ASFR_45-49", "DEPND_0-14", "F-POP_10-14", 
                    "F-POP_15-19", "F-POP_20-24", "F-POP_25-29",  
                    "F-POP_30-34","F-POP_35-39", "F-POP_40-44", "F-POP_45-49", "F-POP_50-54",  "F-POP_55-59", 
                    "F-POP_60-64","F-POP_65-69", "F-POP_70-74", "F-POP_75-79", "F-POP_80-84", "F-POP_85-89", 
                    "F-POP_90-94", "F-POP_95-99","M-POP_10-14", "M-POP_15-19", "M-POP_20-24",  "M-POP_25-29", 
                    "M-POP_30-34", "M-POP_35-39", "M-POP_40-44", "M-POP_45-49", "M-POP_50-54", 
                    "M-POP_55-59", "M-POP_60-64",
                    "M-POP_65-69", "M-POP_70-74", "M-POP_75-79", "M-POP_80-84", "M-POP_85-89", "M-POP_90-94", 
                    "M-POP_95-99", "BIRTHS_15-19", "BIRTHS_20-24", "BIRTHS_25-29", "BIRTHS_30-34", 
                    "BIRTHS_35-39", "BIRTHS_40-44", "BIRTHS_45-49")
```

It seems to be a good idea to split the dataframe according to categories of variables: Variables which encode sex and age, variables which encode sex only, variables which encode age only and variables which encode neither.

```{r}
# variables which encode neither sex nor age:

my_cols_category_1 <- c("Country","ISO2","Year","Area_km2","E0","GR","CBR",       
                    "CDR", "GRR", "IMR", "NIM", "NMR", "POP", "RNI",        
                    "SRB", "TFR","DEPND", "BIRTHS", "DEATHS", "MEDAGE", "NATINCR",
                    "POP_DENS", "SEXRATIO")


data_dem_1 <- data_dem[ , my_cols_category_1]
                    
```

```{r}
# variables which encode only age but no sex:

my_cols_category_2 <- c("Country","ISO2","Year","Area_km2",
                        "MR_0-4", "MR_1-4", "POP_0-4", "POP_5-9",
                        "POP_100-105", "DEPND_65-105", "POP_10-14", "POP_15-19", "POP_20-24",   
                    "POP_25-29", "POP_30-34", "POP_35-39", "POP_40-44", "POP_45-49", "POP_50-54", "POP_55-59",   
                    "POP_60-64", "POP_65-69", "POP_70-74", "POP_75-79", "POP_80-84", "POP_85-89", "POP_90-94",   
                    "POP_95-99", "DEPND_0-14", "BIRTHS_15-19", "BIRTHS_20-24", "BIRTHS_25-29", "BIRTHS_30-34", 
                    "BIRTHS_35-39", "BIRTHS_40-44", "BIRTHS_45-49")
  
  
  
data_dem_2 <- data_dem[ , my_cols_category_2]

data_dem_2_pivot <- data_dem_2 %>% pivot_longer(
                                      cols = !c("Country","ISO2","Year","Area_km2"),
                                      names_to = c("Variable", "Age"),
                                      names_pattern = "(.*)_(.*)",
                                      values_to = "Value"
)


data_dem_2_pivot_wide <- data_dem_2_pivot %>% 
  pivot_wider(
    names_from = Variable,
    values_from = Value
  )

```

```{r}
# Variables that encode only sex but no age

my_cols_category_3 <- c("Country","ISO2","Year","Area_km2",
                        "F-E0", "M-E0", "F-POP", "M-POP",
                        "F-IMR", "M-IMR")
  
data_dem_3 <- data_dem[ ,my_cols_category_3]

data_dem_3_pivot <- data_dem_3 %>% pivot_longer(
                                      cols = !c("Country","ISO2","Year","Area_km2"),
                                      names_to = c("Sex", "Variable"),
                                      names_pattern = "(.*)-(.*)",
                                      values_to = "Value"
)

data_dem_3_pivot_wide <- data_dem_3_pivot %>% 
  pivot_wider(
    names_from = Variable,
    values_from = Value
  )
```


```{r}
# variables which encode sex and age

my_cols_category_4 <- c("Country","ISO2","Year","Area_km2",
                        "F-MR_0-4", "F-MR_1-4", "M-MR_0-4", "M-MR_1-4",
                        "F-POP_0-4", "F-POP_5-9", "M-POP_0-4", "M-POP_5-9",
                        "F-POP_100-105", "M-POP_100-105",
                        "F-ASFR_15-19", "F-ASFR_20-24", 
                    "F-ASFR_25-29", "F-ASFR_30-34", "F-ASFR_35-39",  
                    "F-ASFR_40-44", "F-ASFR_45-49",
                    "F-POP_10-14", 
                    "F-POP_15-19", "F-POP_20-24", "F-POP_25-29",  
                    "F-POP_30-34","F-POP_35-39", "F-POP_40-44", "F-POP_45-49", "F-POP_50-54",  "F-POP_55-59", 
                    "F-POP_60-64","F-POP_65-69", "F-POP_70-74", "F-POP_75-79", "F-POP_80-84", "F-POP_85-89", 
                    "F-POP_90-94", "F-POP_95-99","M-POP_10-14", "M-POP_15-19", "M-POP_20-24",  "M-POP_25-29", 
                    "M-POP_30-34", "M-POP_35-39", "M-POP_40-44", "M-POP_45-49", "M-POP_50-54", 
                    "M-POP_55-59", "M-POP_60-64",
                    "M-POP_65-69", "M-POP_70-74", "M-POP_75-79", "M-POP_80-84", "M-POP_85-89", "M-POP_90-94", 
                    "M-POP_95-99"
                        
  )

data_dem_4 <- data_dem[ , my_cols_category_4]

data_dem_4_pivot <- data_dem_4 %>% pivot_longer(
                                      cols = !c("Country","ISO2","Year","Area_km2"),
                                      names_to = c("Sex", "Variable", "Age"),
                                      names_pattern = "(.*)-(.*)_(.*)",
                                      values_to = "Value"
)

data_dem_4_pivot_wide <- data_dem_4_pivot %>% 
  pivot_wider(
    names_from = Variable,
    values_from = Value
  )
```

Now we clean up the datasets and assign the correct types to the variables:

```{r}
dem_dat_cat1 <- data_dem_1
dem_dat_cat2 <- data_dem_2_pivot_wide
dem_dat_cat3 <- data_dem_3_pivot_wide
dem_dat_cat4 <- data_dem_4_pivot_wide
```

## Processing and refining

```{r}
dem_dat_cat1_reordered <- dem_dat_cat1[with(dem_dat_cat1, order(Country, -Year)), ]
dem_dat_cat2_reordered <- dem_dat_cat2[with(dem_dat_cat2, order(Country, -Year)), ]
dem_dat_cat3_reordered <- dem_dat_cat3[with(dem_dat_cat3, order(Country, -Year)), ]
dem_dat_cat4_reordered <- dem_dat_cat4[with(dem_dat_cat4, order(Country, -Year)), ]
```

The data consist of historical records and projections. I think they should be divided in two spearate sets
accordingly. We start by getting ready with the cat1 data set and then apply what we do there to all the others.

```{r}
dem_dat_cat1_reordered_historic  <- dem_dat_cat1_reordered[dem_dat_cat1_reordered$Year <= 2023, ]
dem_dat_cat1_reordered_projected <- dem_dat_cat1_reordered[dem_dat_cat1_reordered$Year > 2023, ]
```

Now we label the data:

```{r}
library(Hmisc)
```

```{r}
var_labels_1 = c(Country="Name of Country", ISO2="ISO 3166 Alpha2 country code", Year = "Year of observation",
               Area_km2 = "Country area in square kilometers", E0 = "Both sexes life expectancy at birth",
               GR = "Population growth rate in percent", CBR = "Crude birth rate (births per 1,000 population)",
               CDR = "Crude death rate (deaths per 1,000 population)", GRR = "Gross reproduction rate (lifetime births per woman)",
               IMR = "Both sexes Infant mortality rate (infant deaths per 1,000 population", NIM = "Net international migrants, both sexes",
               NMR = "Net migration rate (net number of migrants per 1,000 population", POP = "Total midyear population",
               RNI = "Rate of natural increase (percent)", SRB = "Sex ratio at birth (males per female)", TFR = "Total fertility rate",
               DEPND = "Dependency ratio", BIRTHS = "Number of births both sexes", DEATHS = "number of deaths both sexes",
               MEDAGE = "Median age both sexes", NATINCR = "Natural increase", POP_DENS = "Population density, people per square km",
               SEXRATIO = "Sex ratio at birth (males per female)")

label(dem_dat_cat1_reordered_historic) = as.list(var_labels_1[match(names(dem_dat_cat1_reordered_historic), names(var_labels_1))])
label(dem_dat_cat1_reordered_projected) = as.list(var_labels_1[match(names(dem_dat_cat1_reordered_projected), names(var_labels_1))])

```

Now we do the category 2 data:

```{r}
dem_dat_cat2_reordered_historic  <- dem_dat_cat2_reordered[dem_dat_cat2_reordered$Year <= 2023, ]
dem_dat_cat2_reordered_projected <- dem_dat_cat2_reordered[dem_dat_cat2_reordered$Year > 2023, ]

# The Area per square km is not needed in these datasets

dem_dat_cat2_reordered_historic$Area_km2 <- NULL
dem_dat_cat2_reordered_projected$Area_km2 <- NULL

```

```{r}
var_labels_2 = c(Country="Name of Country", ISO2="ISO 3166 Alpha2 country code", Year = "Year of observation",
                 Age = "Age buckets in years", MR = "Mortality rate both sexes (death per 1000)", POP = "Population", DEPND = "Dependency ratio", BIRTHS = "Births to mothers ")

label(dem_dat_cat2_reordered_historic) =  as.list(var_labels_2[match(names(dem_dat_cat2_reordered_historic),  names(var_labels_2))])
label(dem_dat_cat2_reordered_projected) = as.list(var_labels_2[match(names(dem_dat_cat2_reordered_projected), names(var_labels_2))])
```

Now we do the category 3 data:

```{r}
dem_dat_cat3_reordered_historic  <- dem_dat_cat3_reordered[dem_dat_cat3_reordered$Year <= 2023, ]
dem_dat_cat3_reordered_projected <- dem_dat_cat3_reordered[dem_dat_cat3_reordered$Year > 2023, ]

# The Area per square km is not needed in these datasets

dem_dat_cat3_reordered_historic$Area_km2 <- NULL
dem_dat_cat3_reordered_projected$Area_km2 <- NULL
```

```{r}
var_labels_3 = c(Country="Name of Country", ISO2="ISO 3166 Alpha2 country code", Year = "Year of observation",
                 Sex = "Sex male, female", E0 = "Life expectancy at birth", POP = "Population", IMR = "Infant mortality rate (infant deaths per 1,000 population)")

label(dem_dat_cat3_reordered_historic) =  as.list(var_labels_3[match(names(dem_dat_cat3_reordered_historic),  names(var_labels_3))])
label(dem_dat_cat3_reordered_projected) = as.list(var_labels_3[match(names(dem_dat_cat3_reordered_projected), names(var_labels_3))])
```

Finally we do category 4 data:

```{r}
dem_dat_cat4_reordered_historic  <- dem_dat_cat4_reordered[dem_dat_cat4_reordered$Year <= 2023, ]
dem_dat_cat4_reordered_projected <- dem_dat_cat4_reordered[dem_dat_cat4_reordered$Year > 2023, ]

# The Area per square km is not needed in these datasets

dem_dat_cat4_reordered_historic$Area_km2 <- NULL
dem_dat_cat4_reordered_projected$Area_km2 <- NULL
```

```{r}
var_labels_4 = c(Country="Name of Country", ISO2="ISO 3166 Alpha2 country code", Year = "Year of observation",
                 Sex = "Sex male, female", Age = "Age buckets in years", MR = "Mortality rate (deaths per 1,000 population)", 
                 POP = "Population", ASFR = "Age specific fertility rate for women")

label(dem_dat_cat4_reordered_historic) =  as.list(var_labels_4[match(names(dem_dat_cat4_reordered_historic),  names(var_labels_4))])
label(dem_dat_cat4_reordered_projected) = as.list(var_labels_4[match(names(dem_dat_cat4_reordered_projected), names(var_labels_4))])
```

## Create the final datasets

```{r}

# basic demography data:

dem_dat_basic_hist <- dem_dat_cat1_reordered_historic
dem_dat_basic_proj <- dem_dat_cat1_reordered_projected

# demographic data by age

dem_dat_by_age_hist <- dem_dat_cat2_reordered_historic
dem_dat_by_age_proj <- dem_dat_cat2_reordered_projected

# demographic data by sex

dem_dat_by_sex_hist <- dem_dat_cat3_reordered_historic
dem_dat_by_sex_proj <- dem_dat_cat3_reordered_projected

# demographic data by age and sex

dem_dat_by_sex_and_age_hist <- dem_dat_cat4_reordered_historic
dem_dat_by_sex_and_age_proj <- dem_dat_cat4_reordered_projected
```

```{r}
usethis::use_data(dem_dat_basic_hist, overwrite = T)
usethis::use_data(dem_dat_basic_proj, overwrite = T)
usethis::use_data(dem_dat_by_age_hist, overwrite = T)
usethis::use_data(dem_dat_by_age_proj, overwrite = T)
usethis::use_data(dem_dat_by_sex_hist, overwrite = T)
usethis::use_data(dem_dat_by_sex_proj, overwrite = T)
usethis::use_data(dem_dat_by_sex_and_age_hist, overwrite = T)
usethis::use_data(dem_dat_by_sex_and_age_proj, overwrite = T)
```

